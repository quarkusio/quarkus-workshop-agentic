# This workflow automatically syncs changes from the main branch to other branches
# (i.e. email-feature-branch, private-docs-rag-solution)
# Update the BRANCHES_TO_UPDATE environment variable to include any branches where the sync should push to
#
# Not everything in a commit will be synced.
# There are things on main that don't belong on other branches
# See the add-paths attribute in the create-pr step to customize what gets synced

name: Sync main to other branches

env:
  BRANCHES_TO_UPDATE: "['email-feature-branch','private-docs-rag-solution']"

on:
  workflow_run:
    workflows:
      - "Simple build and test"
    branches:
      - main
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: "workflow = ${{ github.workflow }}, ref = ${{ github.event.workflow_run.head_branch || github.event.ref || github.ref }}"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  calculate-refs:
    if: ((github.event_name == 'workflow_dispatch') || ((github.event_name == 'workflow_run') && ((github.event.workflow_run.event == 'push') || (github.event.workflow_run.event == 'workflow_dispatch')) && (github.event.workflow_run.conclusion == 'success'))) && ((github.repository == 'rh-rad-ai-roadshow/parasol-insurance') && ((github.event.workflow_run.head_branch == 'main')))
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.calculate_branch.outputs.ref}}
      message: ${{ steps.calculate_branch.outputs.message }}
    steps:
      - name: Calculate Branch
        id: calculate_branch
        run: |
          if [[ ${{ github.event_name }} == 'workflow_run' ]]; then
            echo "ref=${{ github.event.workflow_run.head_commit.id }}" >> $GITHUB_OUTPUT
            echo "message<<EOF"$'\n'"${{ github.event.workflow_run.head_commit.message }}"$'\n'EOF >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name}} == 'workflow_dispatch' ]]; then
            echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "message<<EOF"$'\n'"$(git log -1 --pretty=%B | head)"$'\n'EOF >> $GITHUB_OUTPUT
          fi

  create-branches-matrix:
    if: ((github.event_name == 'workflow_dispatch') || ((github.event_name == 'workflow_run') && ((github.event.workflow_run.event == 'push') || (github.event.workflow_run.event == 'workflow_dispatch')) && (github.event.workflow_run.conclusion == 'success'))) && ((github.repository == 'rh-rad-ai-roadshow/parasol-insurance') && ((github.event.workflow_run.head_branch == 'main')))
    runs-on: ubuntu-latest
    outputs:
      branches-to-update: ${{ steps.calculate-branches-to-update.outputs.branches-to-update }}
    steps:
      - name: Calculate branches to update
        id: calculate-branches-to-update
        run: echo "branches-to-update=${{ env.BRANCHES_TO_UPDATE }}" >> $GITHUB_OUTPUT

  sync-to-branches:
    if: ((github.event_name == 'workflow_dispatch') || ((github.event_name == 'workflow_run') && ((github.event.workflow_run.event == 'push') || (github.event.workflow_run.event == 'workflow_dispatch')) && (github.event.workflow_run.conclusion == 'success'))) && ((github.repository == 'rh-rad-ai-roadshow/parasol-insurance') && ((github.event.workflow_run.head_branch == 'main')))
    needs:
      - calculate-refs
      - create-branches-matrix
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        target_branch: ${{ fromJSON(needs.create-branches-matrix.outputs.branches-to-update) }}
    name: Sync to ${{ matrix.target_branch }} branch
    steps:
      - name: Create token for PR creation
        uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          app-id: ${{ secrets.SYNC_APP_ID }}
          private-key: ${{ secrets.SYNC_PRIVATE_KEY }}

      - name: Checkout ${{ matrix.target_branch }} branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.target_branch }}
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      # The entire commit will be cherry picked on top of the branch
      # But not everything will be part of the PR
      # See the add-paths attribute in the create-pr step to customize what gets synced
      - name: Cherry-pick commit ${{ needs.calculate-refs.outputs.ref }} into ${{ matrix.target_branch }}
        run: |
          git config advice.mergeConflict false &&
          git cherry-pick -x -n --allow-empty --allow-empty-message --empty=drop --strategy ort --strategy-option ignore-space-change ${{ needs.calculate-refs.outputs.ref }}

      - name: Create Pull Request targeting ${{ matrix.target_branch }} branch
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          base: ${{ matrix.target_branch }}
          commit-message: ${{ needs.calculate-refs.outputs.message }}
          branch: sync-commit/${{ matrix.target_branch }}
          branch-suffix: timestamp
          delete-branch: true
          title: "Sync \"${{ needs.calculate-refs.outputs.message }}\" from `main` to `${{ matrix.target_branch }}`"
          body: |
            Syncing commit [${{ needs.calculate-refs.outputs.ref }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ needs.calculate-refs.outputs.ref }}) changes from [${{ github.workflow }} run # ${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) to ${{ github.server_url }}/${{ github.repository }}/tree/${{ matrix.target_branch }}.
            
            Original commit message:
            
            ```
            ${{ needs.calculate-refs.outputs.message }}
            ```
          labels: change-sync
          add-paths: |
            .github/.spellcheck.yaml
            .github/.wordlist.txt
            .vscode/**
            prompt-testing/**
            app/**
            .gitignore
            LICENSE
            README.md
            .devfile.yaml

      - name: Merge PR when all checks pass
        if: ((steps.create-pr.outputs.pull-request-operation == 'created') || (steps.create-pr.outputs.pull-request-operation == 'updated')) && (steps.create-pr.outputs.pull-request-number)
        run: |
          echo "${{ steps.generate-token.outputs.token }}" | gh auth login --with-token
          gh pr merge --squash --auto --delete-branch ${{ steps.create-pr.outputs.pull-request-number }}